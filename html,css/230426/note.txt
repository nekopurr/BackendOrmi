HTML/CSS

태그(Tag)
<>, </> 한 쌍으로 구성

주석
<!-- 주석 -->
- 소스 보기를 통해 주석을 볼 수 있기 때문에, 중요한 기밀 사항을 적어놓는 것은 피해야 한다.
- vscode에서는 [Ctrl + /]를 통해 주석처리가 가능하다.


들여쓰기를 기준으로 부모, 형제, 자식, 자손 개념이 있다.
<!-- 예시 -->
<부모>
    <형제>
    <형제>
        <자식><자손></자손></자식>
    </형제>
    </형제>
</부모>

<!DOCTYPE html>
- 문서의 타입
- 작성하지 않아도 기본적으로 브라우저가 알아서 처리해줌

<html lang="ko-KR">
- 문서의 주 언어 설정
- 주 언어 설정은 검색엔진, 스크린리더, 번역 기능 제공 등에 영향을 미친다.
- 스크린리더가 음성 표현에 사용할 언어를 선택할 때 도움이 된다.

<head>
- 검색엔진을 위한 다양한 정보들이 담기는 곳
- 사용자에게는 title, 파비콘, viewport 정보 등이 보인다.

metadata
- 메타데이터 : 어떤 목적을 위해 만들어진 데이터
- 검색엔진이 메타정보를 살펴보고 다양한 정보를 가져간다.

<meta charset="utf-8">
- 문자 깨짐을 방지하기 위해 문자 코드의 종류를 설정

http-equiv="X-UA-Compatible" content="IE=edge"
- 브라우저 호환성을 위해 작성

title
- 특수문자 X
- 검색엔진을 통해 인터넷을 사용하는 사용자가 제목을 보고 탐색할 페이지를 선택
- 약 60자를 넘지 않아야 한다.
- 페이지마다 적당한 제목이 노출되도록 개발하는 것도 중요

link
- 현재 문서와 외부 리소스의 관계를 명시
- 외부 스타일 시트, 폰트, 파비콘을 연결할 때 사용
- 빈 태그, 속성만 포함
    > head : 요소 내부에만 위치 가능
    > rel : relations 관계. 대상 파일의 속성을 나타냄
    > href : hyper-references. 연결 시 참조할 파일의 위치

파비콘(favicon) : Favorite + Icon -> 탭에 보이는 이미지

블록 레벨 요소
- 부모 요소의 전체를 사용한다.
- 줄 바꿈을 사용해서 세로로 쌓인다.

인라인 요소
- 블록 요소는 인라인 요소 안에 중첩될 수 없지만, 인라인 요소는 블록 요소 안에 중첩이 가능
- 인라인 요소의 a 태그의 경우, 안에 블록 요소 중첩이 가능

div
- 콘텐츠 분할 요소. 여러 태그들을 그룹핑하기 위한 태그
- 블록 요소
- CSS로 스타일을 주기 전에는 콘텐츠나 레이아웃에 영향을 주지 않는다.
- 코드의 가독성, 검색엔진 최적화, 접근성 등의 이유로 div 태그 사용은 스타일 적용을 위한 용도로 사용할 것을 권장
- header, footer, main, section, article, nav 등 다양한 시맨틱 한 태그들을 사용하여 콘텐츠를 분할하고 그룹핑

span
- 인라인 요소
- div와 마찬가지로 css 적용 전에는 콘텐츠나 레이아웃에 영향을 주지 않는다.

p
- 줄바꿈 처리가 되는 블록요소

strong
- 강조 태그
- 보이스 오버 기능에서 strong 사이에 있는 문자는 거센 억양으로 소리를 내어 발음
- 접근성 문제 때문에 쓰기도 함

br
- 줄 바꿈
- br을 사용하지 않고, css로 처리하는 편

code
- 고정 폭 글꼴 사용
- 짧은 코드 조각(한 줄)을 나타날 때 사용

pre
- 고정 폭 글꼴을 사용하고, 공백을 그대로 유지

ol, ul, li
- ol과 ul은 무조건 li을 자식요소로 사용해야 한다.
- 정렬된, 순서가 있는 숫자 목록
- li : 목록의 항목을 나타냄

img
- 문서에 이미지 삽입
    > src : 경로
    > alt : 대체 텍스트, src에 저장한 이미지를 불러오는데에 실패했을 때, 대체하여 보여줄 텍스트

form
- 사용자에게 입력받은 정보를 제출하기 위한 대화형 컨트롤을 포함하는 문서 구획

method 속성
- post
    > 양식 데이터를 요청 본문으로 전송
    > 브라우저에 의해 캐시되지 않고, 브라우저 히스토리에도 남지 않음
    > 데이터의 길이에 제한이 없고, GET 방식보다 보안성이 높음
- Get
    > 양식 데이터를 action URL과 ? 구분자 뒤에 이어 붙여서 전송
    > GET 방식의 HTTP 요청은 
    > 길이의 제한이 있다 (브라우저마다 다름)
    > 중요한 데이터는 POST, 간단한 데이터는 GET 방식을 사용하는 것이 좋음

- action
    > 데이터를 어디로 보낼 것인지 지정
    > action을 지정하지 않으면, 데이터는 form이 있는 페이지의 URL로 보내짐

- autocomplete
    > 자동완성된 값

label
    > 어떤 정보를 받을 것인지 적는 기능
    > input과 함께 사용

button
- 사용자가 클릭할 수 있는 요소
- 어디든지 배치 가능
- a태그와 button의 차이
    > a는 하이퍼링크, button은 사용자의 동작 실행을 위한 트리거
    > button은 JS를 이용하여 동작을 추가해야한다 (submit : form 전송 / reset : form 초기화)

input
- required : 필수로 값을 입력하게 함
- disabled : 비활성화
- readonly : 쓰기 불가능
- email : 이메일 형식으로 입력받음
- password : 비밀번호 입력(값이 가려짐)
- url : url 형식으로 입력받음
- tel : 전화번호 입력
- checkbox : 체크박스 (단일 값)
- radio : 같은 name값을 가진 여러개의 선택중에서 하나만 선택 가능
- file : 파일 선택
- maxlength : 최대길이
- minlength : 최소길이
- input 태그의 경우 빈 태그 요소이기 때문에 value 특성에 텍스트 값 밖에 지정할 수 없다
  하지만, button 태그의 경우 여는 태그와 닫는 태그 사이에 여러 컨텐츠 삽입이 가능하다
- multiple을 통해 이미지나, 체크박스를 다중 선택 가능하다.


궁금한 부분은 [키워드 + mdn] 을 검색하면 나온다.